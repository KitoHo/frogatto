{
id: "shot",
is_strict: true,
prototype: ["hittable"],
activation_border: 1000,  //most shots need to persist for a good bit further than most standing creatures do; they're often fired off-screen.



collide_dimensions: ["player","enemy","~hazard","obstruction"],
#solid_dimensions: ["enemy","player","common"],
solid_dimensions: ["~shot"],

#make it so when the object runs into solid parts of the level, an on_collide_level event is fired so the shot can be destroyed.
object_level_collisions: true,
has_feet: false,

/*
expected things a user of this prototype must implement to deal damage
	properties.attack_damage - how much damage is dealt
	properties.attack_knockback - a power-level for how hard it hits.
	properties.damage_cooldown - how long the enemy will be invincible, used to cap the DPS of flamethrower-esque weapons, whilst allowing nigh-unlimited numbers of shots to make the attack easy to hit with.
		Note that if cooldown is zero, the enemy should always take damage.
	animation attack_area - an area that will trigger a hit
	animation body_area - only set this if you want this shot to be neutralizable by enemy shots
*/
properties: {
#-------------------------- hittable overrides --------------------------#
	team: "string :: 'evil'",
	attack_knockback: "int :: 0",
	attack_damage: "int :: if(higher_difficulty, 2, 1)",
	damage_cooldown: "int :: 0",
	
	taxonomy: "'neutral'",  //TODO - this could be evil; this opts shots out of damage-type calcs completely (with regards to shots, themselves receiving damage, not their victims).

	has_mini_hp_bar: "bool :: false",

#-------------------------- shot settings --------------------------#
		#only for death upon striking an enemy body/armor area, NOT for from hitting enemy attack areas.  Always dies instantly.
	dies_upon_dealing_damage: "bool :: true",

		#causes the shot to bleed HP (usually to die instantly because it has only one HP) if it hits an enemy attack area.  Primarily used to allow frogatto to breathe fire/energy-shots at the enemy and deflect their shots with his shots - almost always set in favor of the player.
	deflectable_via_attacks: "bool :: if(team = 'player', false, true)",  

		#these two properties exist because there may be cases (like the homing shot) where we want a projectile that does expire upon successfully hitting, but only if it successfully hits an actual enemy, not shots fired by the enemy.  
	is_a_shot: 	"bool :: true",
	goes_through_enemy_shots: "bool :: false",

	is_aquatic: "bool :: false",

		#this is specifically for on_collide_level.  All that event provides is notification that our opaque pixels touched the level's solid pixels - it does nothing for our collide areas.  For most shots, this is fine and good, because their actual graphical size is quite small, but for some rather large shots like the player's super-shots, we want the area within which they hit enemies to be much, much larger than that within which they'll die from colliding with terrain - this is most prominent on the fireball - we want the targeting for it to be very, very forgiving - but at its default height off the ground (to be correctly spaced WRT the player), it's graphics are actually touching the ground, and it'd normally detonate there.
		#Thus, what we do with shots like that is we actually give them a solid area, and keep them out of all the normal solid areas so this solid_area only collides when they hit the actual level itself
	dies_upon_colliding_with_level: "bool :: (solid_rect = null)",

#-------------------------- collision handlers --------------------------#
	enter_water: "if(not is_aquatic, me.force_death())",

	
		#remember, these events are NOT for dealing damage to an enemy - the enemy takes care of that in its copies of these events (in hittable).  These are only for potentially dealing damage to ourselves.  The design pattern in frogatto is that the victim decides everything WRT its own damage; the attacker simply provides info the victim makes decisions with.
	maybe_get_hit_by: "def(obj hittable collide_with) -> commands
								/* if we hit our body, try bleeding HP from potential deflections */
									if(deflectable_via_attacks, get_hit_by(collide_with))",

	
	handle_attack_area_collision_with_hittable_body: "def(obj hittable collide_with) -> commands execute(me,
								/*
									when our attack hits, decide if we want to kill ourselves.
									it's assumed, but only enforced externally, that this is our attack area hitting something else's body
								*/	  

								if(dies_upon_dealing_damage and if(collide_with is obj shot, 
									collide_with.deflectable_via_attacks = true, true),
									if(me.goes_through_enemy_shots and collide_with.is_a_shot,
										null,
										me.force_death()
									)
								)	
							)",
	
	
},

on_collide_side: "me.force_death()",
on_collide_feet: "me.force_death()",
on_collide_head: "me.force_death()",

on_collide_level: "if(dies_upon_colliding_with_level, me.force_death())",

}
