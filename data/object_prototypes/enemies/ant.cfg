{
id: "ant",
prototype: ["movable_enemy"],

timer_frequency: 2,
hitpoints: 50,
solid_area: [6,10,19,25],

properties: {

	attack_damage: "if(not underwater, if(higher_difficulty, 2, 1))",
	taxonomy: "'bug'",
	is_enemy_character: "true",
	acquirable_item_drop_value: "int :: 10",					
	points_value: "int :: 10",
	slope_rotation_factor: "decimal :: 1.0",


#-------------------------- behavior flags --------------------------#
	turns_at_cliffs: "bool :: true",
	turns_towards_player: "bool ::(level.player.difficulty >= difficulties.challenging)",
	turns_towards_player_x_threshold: "int :: 250",  #how far away you have to be to be ignored
	turns_towards_player_delay: "int :: 200",


#-------------------------- conditions used in behavior flags --------------------------#
	should_turn_away_from_cliff: "bool :: (turns_at_cliffs and (not is_there_flat_ground_ahead_of_us(distance_to_cliff_check)))",
	should_turn_towards_player: "bool :: (not is_facing_towards_player) and (not (level.player.mid_y - 50) > mid_y) and if(turns_towards_player and if(turns_towards_player_x_threshold,(turns_towards_player_x_threshold > x_distance_to_player), false), true, false)",
	
#-------------------------- values used in behavior flag conditions --------------------------#
	distance_to_cliff_check: "int :: max(30, abs(velocity_x/7))",
	x_distance_to_player: "int :: abs(mid_x - level.player.mid_x)",
	y_distance_to_player: "int :: abs(mid_y - level.player.mid_y)",


#-------------------------- behavior commands --------------------------#
	turn_around: "commands :: if((should_turn_away_from_cliff) or (not turned_to_face_player_too_recently), [set(facing, -facing),animation('turn'), set(_last_turned,level.cycle)]) where turned_to_face_player_too_recently = abs(level.cycle - _last_turned) < turns_towards_player_delay",
	
},




#-------------------------- collision handling --------------------------#
on_collide_side: "if(not (animation in ['hurt']), [set(facing, -facing), animation('turn'), set(velocity_x,0)])",
on_collide_head: "set(velocity_y, -velocity_y/2)",
on_collide_feet: "[animation('walk'),proto_event('movable_enemy','collide_feet')]",

#-------------------------- animation switching --------------------------#
on_end_anim: "animation('walk')",
on_enter_walk_anim: "if(not is_standing, animation('stand'))",
on_process_stand: "if(is_standing, animation('walk'))",
on_timer: "[set(rotate, slope_standing_on * slope_rotation_factor), if(is_standing and animation in ['walk','run'] and (should_turn_away_from_cliff or should_turn_towards_player),turn_around,null)]",
on_end_turn_anim: "animation('walk')",
on_end_hurt_anim: "animation('walk')",

}
