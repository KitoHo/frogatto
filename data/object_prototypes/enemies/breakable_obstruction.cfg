{
id: "breakable_obstruction",
prototype: ["hittable"],
hitpoints: 5,

springiness: 0,
friction: 1000,
traction: 1000,
traction_in_air: 1000,
has_feet: false,

editor_info: {
	category: "obstacles",
},

collide_dimensions: ["~player","~enemy","~hazard","~obstruction"],

zorder: "@include data/zorder.cfg:exterior_decor",


properties: {

#-------------------------- special damage handlers --------------------------#
	special_vulnerability: "string|null :: null",
	handle_custom_damage_type_modifications: "def(string damage_type, int amount) -> int|null
						if(special_vulnerability != null,
							if(damage_type = special_vulnerability, kill_anything, 0),
							null
						)",

	#-- crumbling --#
	/*
		Some crumbling blocks die instantly if they're touched by the right kind of damage.  Others have a custom set of animations to depict them gradually crumbling away as they take damage, and each animation is made to correspond to the appropriate percentile range of hitpoints.
	
		Since our engine has limited introspection WRT the available animations, there's a certain amount of this where you have to play nice and make sure you're providing what it expects.
	*/
	
	is_crumbly: "bool :: crumble_animation_count > 1",
	crumble_animation_count: "int :: 1",
	hp_per_animation: "decimal :: max_hitpoints/decimal(crumble_animation_count - 1)",
		//the -1 makes the very first animation only get used for exactly 100% hp.  More to the point, it makes its range include that + "a hitpoint's worth" above 100%.  If we had a 5-frame object, that'd be a range from 100% -> 119.99~%; they include the bottom number, but not the top.
	
	animation_number: "def(int final_hitpoints) -> int lib.math.floor(final_hitpoints/hp_per_animation)",

	handle_special_damage_response: "def(string damage_type, int final_damage_amount, bool will_die) -> commands
										if(is_crumbly and not will_die,
											map(me_and_hittable_attaches,
												if(new_animation in value.available_animations,
													set(value.animation, new_animation)
												) where new_animation = ('normal_' + animation_number(hitpoints - final_damage_amount))),
											null
										)",
	
	
										

#-------------------------- hittable behavior lockdowns --------------------------#
	hurt_velocity_x: 0,
	hurt_velocity_y: 0,
	handle_knockback: "def(obj hittable collide_with) -> commands null",
	taxonomy: "'neutral'",
	death_fx_ignore_damage_type: "true",

#-------------------------- hittable flags --------------------------#
	team: "'neutral'",
	acquirable_item_drop_value: 10,					
	points_value: 10,
	basic_type: "me.type",
	frogourmet_tag: "me.basic_type",
	has_mini_hp_bar: "bool :: false",
	
	
#-------------------------- cosmetic stuff --------------------------#
	should_flicker: "bool :: false",
	_rand: { type: "int", init: "1d360", persistent: false },
	do_ethereal_flicker: "commands :: set(alpha, lib.math.round(215 +5*sin(time*15) +5*sin(time*19) +15*sin(time*2)+15*sin(time*2.5)))
							where time = level.cycle + _rand",


#-------------------------- some soft defaults --------------------------#
	material_sound: "'stone'",
	death_fx_type: "'stone_large'",
	physical_size: "int :: 48",

	has_top: "bool :: true",
	
},

on_create: "[
				if(has_top, spawn(me.type + '.top', mid_x, mid_y, {})),
				set_max_hitpoints({casual: standard_thrown_damage * 6, challenging: standard_thrown_damage * 3})
			]",


on_process: "[
				if(should_flicker, do_ethereal_flicker)
			]",


}
