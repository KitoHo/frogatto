{
id: "snodge_red",
prototype: ["ant"],
editor_info: {
	category: "enemies, forest",
},
properties: {
	points_value: 4,
	
	title: "~Snodge~",
	description: "~We named this before we looked it up on Urban Dictionary.  Honest.~",
	taste: "~Better than the other kind...  I assume.~",
	
	player_within_aggro_range: "lib.math.length(level.player, me) < 150",
	
	consider_attacking_player: "commands :: if(	(level.cycle - last_checked_for_player > 150) and is_standing and can_see(me, level.player), liftoff )",

	liftoff: "commands :: [
				remove_object(me),
				add_object(flying_version),
				fire_event(flying_version, 'liftoff')
			] where flying_version = object('snodge_red.flying',mid_x,mid_y,{facing: facing, hitpoints: hitpoints})",
	
	last_checked_for_player: { type:"int", init: "level.cycle" },
		
},
on_end_anim: "proto_event('ant','end_anim')",


on_process: "consider_attacking_player",

on_snodging: "sound_falloff('snodge.wav')",

animation: ["@flatten",

	{
		"@base": true,
		image: "enemies/snodge-red.png",
		rotate_on_slope: true,
		pad: 3,
		accel_x: 0,
		accel_y: 80,
		body_area: "all",
	},
	{
		id: "stand",
		rect: [123,45,147,72],
		frames: 1,
		duration: 6,
		attack_area: [15,14,30,30],
	},
	{
		id: "walk",
		attack_area: [15,14,30,30],
		accel_x: 250,
		rect: [177,1,201,28],
		events: "1:snodging",
		frames: 7,
		frames_per_row: 1,
		duration: 3,
	},
	{
		id: "spring",
		rect: [3,13,27,40],
		frames: 1,
		duration: 4,
	},
	{
		id: "turn",
		rect: [3,45,27,72],
		frames: 3,
		duration: 4,
		attack_area: [0,14,30,30],
	},
	{
		id: "hurt",
		rect: [90,45,114,72],
		frames: 1,
		duration: 18,
	},
	
],
object_type: [
{
	id: "flying",
	prototype: ["ant_flying"],
	friction: 5000,
	has_feet: true,
	properties: {
		attack_damage: "if(higher_difficulty, if(me.animation = 'charge', 3, 2), if(me.animation = 'charge', 2, 1))", 
	
		delay_before_first_charge: "if(higher_difficulty, 100, 100)",
		delay_before_charging_after_prepping: "if(higher_difficulty, 50, 100)+1d50", //this is also the delay when doing repeated aerial charges
	
		thrown_type: "'snodge_red.thrown'",
	
		unit_triangle_xy_components_for_angle: "def(decimal angle) -> {x: decimal, y: decimal} {x: cos(angle), y: sin(angle)}",
		angle_components_to_player: "{x: decimal, y: decimal} :: unit_triangle_xy_components_for_angle( lib.math.angle(me, level.player) )",
	
		schedule_charge: "commands :: if(cycle - _last_started_attacking_player > delay_before_first_charge,
								[
									return_to_normal_anim,
									sound('snodge-growl.wav'),
									turn_towards_player,set(_last_started_attacking_player, cycle),
									schedule(delay_before_charging_after_prepping, bind_command(def() consider_charge))
								])",
								
		consider_charge: "commands :: if(is_facing_towards_player, begin_charge, [turn_around, schedule(12, bind_command(def() consider_charge))])",
		begin_charge: "commands :: [
							set(animation,'charge'),
							set(velocity_x, speed * ang.x),
							set(velocity_y, speed * ang.y),
							
						] where ang = angle_components_to_player where speed = 4000",

		custom_impact_sound: "'snodge-struggle.wav'",
		_last_started_attacking_player: { type:"int", default: 0 },

		liftoff: "[
				return_to_normal_anim,
				set(velocity_y, -600),
				set(fall_through_platforms,-1),
				schedule_charge
				]",

		switch_to_thrown_version:  "if(not _already_added_replacement_obj, [
										set(_already_added_replacement_obj, true),
										remove_object(me),
										set(replacement.fall_through_platforms, 20),
										add_object( replacement )
									]) where replacement = thrown_version(me)",
		switch_to_standing_version: "if(not _already_added_replacement_obj, [
										set(_already_added_replacement_obj, true),
										remove_object(me),
										add_object( standing_version(me, 'snodge_red') )
									])",
		
		standing_version: "def(obj movable_enemy source_obj, string standing_type) -> obj movable_enemy standing_version
								where standing_version = (obj movable_enemy <- object(standing_type, source_obj.mid_x, source_obj.mid_y, {facing: source_obj.facing, hitpoints: source_obj.hitpoints, attributes:source_obj.attributes, variations: source_obj.variations, event_handlers:source_obj.event_handlers}))",
									

		thrown_version: "def(obj hittable source_obj) -> obj hittable throwable_obj
				where throwable_obj = replacement_object_with_preserved_attributes_and_physics(source_obj, source_obj.thrown_type)",
			
		_collided_on_frame: { type:"int", default: 0 },	
		do_only_once_per_collision: "def(commands stuff_to_do) -> commands if(_collided_on_frame != cycle, [set(_collided_on_frame,cycle), stuff_to_do])",
		
		collision_handler:  "def(custom_obj|null collide_with, string|null collide_with_area) -> commands 
								[
									return_to_normal_anim,
									set(velocity_x, 0), set(velocity_y, 0),
									if(collide_with is obj hittable and collide_with_area is string,
										[
											if(collide_with = level.player, [
												level.player.handle_body_collision(me, 'attack'),
												do_only_once_per_collision([
													 schedule(5, bind_command(def()switch_to_thrown_version))
												])
											]),
											impact_cloud(mid_x,mid_y,'large'),
											elastic_collision(collide_with, {multiplier: 1.1, constraint: {min: 50, max: 1000}}),
										]
									)
								]",
		_already_added_replacement_obj: { type:"bool", default:false },
		
		return_to_normal_anim: "[
							set(animation,'fly'),
							set(rotate, 0)
						]",
	},
	on_liftoff: "liftoff",
	on_process_fly: "/*don't do any of the normal movement mechanics.*/
					[schedule_charge, if(is_standing, switch_to_standing_version)]",

	on_collide_head: "collision_handler(arg.collide_with, arg.collide_with_area)",
	on_collide_feet: "collision_handler(arg.collide_with, arg.collide_with_area)",
	on_collide_side: "collision_handler(arg.collide_with, arg.collide_with_area)",
	on_end_anim: "switch(animation,
							'charge', animation('charge'),
							animation('fly')
						)",
						
	on_process_charge: "[
							set(rotate,  facing_adjusted_velocity_angle),
							if(speed < 300, return_to_normal_anim)
						]",

	animation: [
		{
			"@base": true,
			image: "enemies/snodge-red.png",
			rotate_on_slope: true,
			pad: 3,
			accel_x: 0,
			accel_y: 0,
			body_area: "all",
			attack_area: "all",
		},
		{
			id: "charge",
			rect: [207,1,254,48],
			frames: 4,
			frames_per_row: 1,
			duration: 2,
			events: "1:wingflap",
			attack_area: "none",
			solid_area: [12,16,25,31],
		},
		{
			id: "fly",
			duplicates: 6,
			rect: [3,76,38,111],
			frames: 8,
			frames_per_row: 4,
			duration: 2,
			events: "8:wingflap",
		},
		{
			id: "turn",
			rect: [3,154,38,189],
			frames: 3,
			duration: 4,
		},
		{
			id: "hurt",
			rect: [120,193,155,228],
			frames: 1,
			duration: 18,
		},
	],
},
{
	id: "thrown",
	prototype: ["throwable_small_enemy"],
	properties: {
		custom_impact_sound: "'snodge-struggle.wav'",
		taxonomy: "'bug'",
	},

	animation: [
		{
			image: "enemies/snodge-red.png",
			id: "thrown",
			thrown_area: "all",
			duration: 60,
			rect: [31,13,55,40],
			frames: 1,
			body_area: null,
		},
		{
			image: "enemies/snodge-red.png",
			id: "on_back",
			rect: [31,13,55,40],
			events: "0:distress",
			frames: 2,
			duration: 5,
			body_area: "all",
		},
	],
}
],
}
