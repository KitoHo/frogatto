{
id: "curvey_rope_controller_swaying",
next_animation: "'normal'",
always_active: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
timer_frequency: 3,
is_strict: false,

editor_info: {
	category: "controllers, vfx",
	help: "Assign the rope controller a label. Assign another
		object a label_of_this_object space sequencial_number.
		---
		Resolution: Number of subsections. Lower is faster.
		Sway: How much to move (x axis).",
},

properties: {
	bcurve: "def([Point2d] points, decimal percent) -> [decimal,decimal] lib.math.bezier_curve(points, percent/100.0)",
	set_points: "def([Point2d] points) -> commands execute(self, [set(anchor_points, points), fire_event('editor_changed_variable')])",
	remove: "def() -> commands fire_event(self, 'editor_removed')",

#-------------------------- vars --------------------------#
	my_created_objects: { type: "[obj rope_angled_controller]", default: [] },
	desired_rope_type: {
		type: "string", 
		default: "normal", 
		editor_info: {type: "enum", value: "normal", enum_values: ["normal", "dark", "chain", "track", "tongue", "arrow ribbon"],},},

	_last: "Point2d|null :: if(size(anchor_points), anchor_points[size(anchor_points)-1])",

#-------------------------- vars unique to the business of swaying --------------------------#
	anchor_points: { type: "[Point2d]", default: [], editor_info: { type: "points", value: "[]" } },
	resolution: {
		type: "int", default: 10, 
		editor_info: {type: "int", value: 10, min_value: 1, max_value: 40,},},
	sway: { type: "int", default: 70, editor_info: { type: "int", value: "70" } },
	frequency: { type: "int", default: 2, editor_info: { type: "int", value: "2" } },
	center: { type: "int", default: 40, editor_info: { type: "int", value: "40" } },
},
on_timer: "if(anchor_points and size(anchor_points) > 2, [
			set(anchor_points,
				[anchor_points[0]] +
				(map(anchor_points[1:size(anchor_points)-1], [value[0]+delta, value[1]]) where delta = sin((cycle+center)*frequency)/sway) +
				[(Point2d <- _last)]
			),
			fire_event('set_segments'),
		])",
		
on_create: "if(anchor_points, [
	map(range(0,resolution), 'point', [
		set(rope_ctrl.x_1, rope_ctrl.midpoint_x),
		set(rope_ctrl.y_1, rope_ctrl.midpoint_y),
		set(rope_ctrl.x_2, bcurve(anchor_points, ind+100.0/resolution+1)[0]),
		set(rope_ctrl.y_2, bcurve(anchor_points, ind+100.0/resolution+1)[1]),
		set(rope_ctrl.animation, desired_rope_type),
		add(my_created_objects, [rope_ctrl]),
		add_object(rope_ctrl),
	] where rope_ctrl = object('rope_angled_controller', bcurve(anchor_points, ind)[0], bcurve(anchor_points, ind)[1], {facing: 0, index: ind}) where ind = point * (100.0/resolution) ) where resolution = resolution
])",


on_editor_changed_variable: "[
	set(my_created_objects, []),
	map(my_created_objects, remove_object(value)),
	fire_event('create'), //Don't recreate the sub-ropes unless we're actually in the level.
	set(resolution, lib.math.constrain(1, resolution, 40)),
]",

on_set_segments: "map(my_created_objects, 'segment', [
			segment.set_ends(
				bcurve(anchor_points, segment.index+0/resolution)[0], 
				bcurve(anchor_points, segment.index+0/resolution)[1], 
				bcurve(anchor_points, segment.index+100.0/resolution+1)[0], 
				bcurve(anchor_points, segment.index+100.0/resolution+1)[1]
			),
		]) where resolution = resolution",

on_editor_removed: "map(my_created_objects, remove_object(value))",
			
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 104,
	w: 28,
	h: 28,
},
}
