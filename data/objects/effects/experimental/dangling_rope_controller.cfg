{
id: "dangling_rope_controller",
zorder: "@include data/zorder.cfg:in_front_of_everything",
is_strict: true,
hidden_in_game: true,
always_active: true, //A hack until we figure out the proper active area.
next_animation: "'normal'",

editor_info: {
	category: "controllers, vfx",
	help: "A rope dangles and sways from the controller object.", //Might also be useful for seaweed.
},

/*
Useage Notes:
obj.nudge([x,y]): Moves the rope to the coordinate given. Takes level coordinates. Gives an impulse.
obj.attach(obj): Attach an object with a mass value to the rope.
*/

properties: {
	length: {
		type: "int", 
		default: "@eval mid_y+256", 
		editor_info: {type: "y", value: "mid_y+256",},
	},
	
	desired_rope_type: {
		type: "string", 
		value: "'normal'", 
		editor_info: {
			type: "enum", 
			value: "'normal'", 
			enum_values: ["normal", "dark", "chain", /*"track", "tongue",*/ "arrow ribbon"],
		},
	},
	
	sway_strength: {
		type: "decimal", 
		default: 1.25, 
		editor_info: {type: "decimal", value: 1.25,},
	},
	
	sway_speed: {
		type: "decimal", 
		default: 3.0, 
		editor_info: {type: "decimal", value: 3.0,},
	},
	
	sway_bias: {
		type: "decimal", 
		default: 0.5, 
		editor_info: {type: "decimal", value: 0.5,},
	},
	
	segments: {
		type: "[obj rope_angled_controller]",
		default: [],
	},
	
	original_offsets: {
		type: "[Point2d]",
		default: [],
	},
	
	//Strength of sways caused by wind. A list of 1d vectors.
	//The second vector is implicit, because the rope doesn't stretch and change length.
	sway: {default: {wind: 0.0}},
	
	nudges: {
		type: "[[decimal]]", //List of nudge offsets for each rope segment joint. A list of lists of 1d vectors.
		default: [],
	},
	nudge: "def(object|{x: decimal, y: decimal}|Point2d at_) -> commands //at: Gives the height and strength of the impulse.
		add(nudges, [map(segments,
			if(index = at_index, at[0]-midpoint_x, 0)
		)]) asserting at_index >= 0 and at_index < size(segments)
		where at_index = (at[1] - midpoint_y + 32/2)/32
		where at = lib.standardize.to_point(at_)",
	
	hanging_objects: {
		type: "[obj player_controlled | obj movable_enemy]",
		default: [],
	},
	attach: "def(obj player_controlled | obj movable_enemy hanger) -> commands add(hanging_objects, [hanger])",
	detach: "def(obj player_controlled | obj movable_enemy hanger) -> commands set(hanging_objects, filter(hanging_objects, not value = hanger))",
	
	tension_at_segment: "def(int index) -> decimal 0
		+ (size(segments)-index+0.5)*0.5 //Unit weight, the weight of the rope and all the rope beneath it.
		+ fold(map(filter(hanging_objects, value.mid_y >= mid_y+index*32), decimal<-value.mass), a+b) //The weight of any attached objects below us.
	",
	
	rope_point_offsets: "[Point2d] <- [[0,0]] + rotated //Bring together all the different effects on the rope.
		where rotated = calculate_rope_segment_heights(0, Point2d<-mid_xy, gravity_pull)
		where gravity_pull = [[0,0]]+(
			map(last_pos, 
				[value[0]*(0+diff) + points_above[index][0]*(1-diff), value[1]] 
				where diff = 1.0/(abs(tension_at_segment(index+1))+1) )
			where points_above = [[0,0]]+last_pos )
		where last_pos = map(segments, [
			value.x_2-original_offsets[index+1][0]+wind_sway[index][0]+all_nudges[index], 
			value.y_2-original_offsets[index+1][1] ])
		where wind_sway = [Point2d] <- ([[sway.wind, 0]])*size(segments)
		where all_nudges = [decimal] <- (fold(nudges, map(a, a[index] + b[index])) or [0]*size(segments) )",
		
	calculate_rope_segment_heights: "def(int index, Point2d reference_location, [Point2d] rope_points) -> [Point2d] 
			base index = size(rope_points)-2:
				[normalize(rope_points[index], rope_points[index+1], index)]
			recursive: 
				[normalized_point] + calculate_rope_segment_heights(index+1, normalized_point, rope_points) 
					where normalized_point = normalize(rope_points[index], rope_points[index+1], index)",
	normalize: "def(Point2d a, Point2d b, int index) -> Point2d
		[b[0], lib.math.rotate([a[0], a[1]+ref_loc], angle(a[0], a[1]+ref_loc, b[0], b[1])-90, a)[1]] //Hackety-hack, doesn't rotate with much percision so discard the x component and only use the impercise y component because most of the motion is on the x axis anyway.
		where ref_loc = 32*sign(a[1]-b[1]) //Handle floaty ropes too!",
},

on_create: "[
	map(segments, remove_object(value)), //Remove previously existing segments because the editor gets a bit confused and doubles them up otherwise.
	set(segments, new_segments),
	map(new_segments, add_object(value)),
	
	set(original_offsets, [Point2d <- me.mid_xy] //Calc the base position for the endpoints of the rope.
		+ map(new_segments, Point2d <- [value.x_2, value.y_2] asserting value is obj rope_angled_controller)),
	
] where new_segments = [object('rope_angled_controller', x, y, {
	x_1: mid_x, 
	y_1: mid_y+seg_y*32, //32 needs to be because it's a multiple of the rope.
	x_2: mid_x, 
	y_2: mid_y+(seg_y+sign(length-mid_y))*32, //Add or subtract one to give us the end-point of our segment.
	animation: desired_rope_type,
}) | seg_y <- range((length-mid_y)/32)]",

on_editor_changed_variable: "[
	set(length, mid_y+round((length-mid_y)/32.0)*32), //Set the red draggy bar to the closest whole rope segment to the mouse. This behaviour feels nice to use.
	fire_event('create'),                             //(However, due to rounding issues, the length of the rope changes if we drag the object in 'percise mode'. We should really fix the offset calculation to take that into account.)
]",

on_process: "[
	fire_event('update_rope_forces'),
	fire_event('update_rope_position'),
]",

on_update_rope_forces: "[
	set(sway.wind, (sin(x + cycle*sway_speed) + sway_bias) * sway_strength), //x is factor for wind speed, cycle is factor for wind gustyness, last number is factor for wind strength.
	
	set(nudges, filter(
		map(nudges, 'nudge_list', map(nudge_list, 
			(value + ref_nudge[index+2])/2 //Propagate a 'nudge' upwards by averaging out the nudges values. (A nudge is a 1d offset.)
		) where ref_nudge = [decimal] <- ([0] + nudge_list + [0]) ),
		find(value, value), //Remove unused nudges.
	)),
	
	set(hanging_objects, filter(hanging_objects, value.mid_y > mid_y and value.mid_y < mid_y+size(segments)*32)),
]",

on_update_rope_position: "[
	map(segments, value.set_ends(
		base_[index+0][0]+offset[index+0][0], base_[index+0][1]+offset[index+0][1], 
		base_[index+1][0]+offset[index+1][0], base_[index+1][1]+offset[index+1][1]
	)),
		
	map(hanging_objects, 'hanger', 
		set(hanger.x, 
			lib.math.interpolate(
				[midpoint_x - mid_offset] + map(segments, value.mid_x - mid_offset), //top of rope + bottom of segments
				lib.math.constrain(0, ((int<-hanger.mid_y)-mid_y)/1.0/(length-mid_y), 1)
			)
		) where mid_offset = ((int <- hanger.x2) - (int <- hanger.x))/2 +10
	),
] where 
	base_ = original_offsets,
	offset = rope_point_offsets",
			
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179, y: 104, w: 28, h: 28,
}
}