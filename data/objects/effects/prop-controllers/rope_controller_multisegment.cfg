{
id: "rope_controller_multisegment",
always_active: true,
zorder: "@include data/zorder.cfg:in_front_of_everything",
hidden_in_game: true,

editor_info: {
	category: "controllers, vfx",
},

properties: {
	ropes: {
		type: "[obj rope_angled_controller]", 
		default: [],
	},
	anchor_points: {
		type: "[Point2d]", 
		default: [], 
		editor_info: {type: "points", value: "[]",},
	},
	desired_rope_type: {
		type: "string", 
		value: "'normal'", 
		editor_info: {type: "enum", value: "'normal'", enum_values: ["normal", "dark", "chain", "track", "tongue", "arrow ribbon"],},
	},
	
	set_points: "def([Point2d] points) -> commands execute(self, [set(anchor_points, points), fire_event('editor_changed_variable')])",
	remove: "def() -> commands fire_event(self, 'editor_removed')",
},


on_create: "if(anchor_points and size(anchor_points) > 1, 
	map( range(size(anchor_points)-1), 'point', [
		set(rope_ctrl.x_1, anchor_points[index][0]),
		set(rope_ctrl.y_1, anchor_points[index][1]),
		set(rope_ctrl.x_2, anchor_points[index+1][0]),
		set(rope_ctrl.y_2, anchor_points[index+1][1]),
		set(rope_ctrl.animation, desired_rope_type),

		add(ropes, [rope_ctrl]),
		add_object(rope_ctrl),
		fire_event(rope_ctrl, 'create')
	] where rope_ctrl = object('rope_angled_controller', anchor_points[index][0], anchor_points[index][1], 0) 
))",

on_editor_changed_variable: "[
	set(ropes, []),
	map(ropes, remove_object(value)),
	fire_event('create'), //Don't recreate the sub-ropes unless we're actually in the level.
]",

on_editor_removed: "map(ropes, remove_object(value))",
			
animation: {
	id: "normal",
	image: "effects/particles.png",
	x: 179,
	y: 104,
	w: 28,
	h: 28,
},
}