{
	id: "widget_carousel", //Object for displaying arbitrary animation widgets. (Requires at least one widget.)
	hidden_in_game: true,
	zorder: '@include data/zorder.cfg:ovelaid_gui_dialog_gui_element_underlay',
	is_strict: false, //Can't be true until we can read mouse_x in strict mode.
	
	properties: {
		offset: {type: "Point2d"}, //Populate this with a fudge factor for x/y location of the widget, so we know where to set the clip area to. The value is derived by guess-and-test, I have no idea what it is related to. Example: [-369+relative_x, 231+relative_y]
		display: {type: "[{type: string, object: string, name: string, x: int, y: int}]"}, //Fill with widgets to be scrolled.
		on_change: {type: "function(string)->commands", init: "def(string _nop) null"}, //Populate this with your own callback; is called with the object name of the animation currently centered.
		
		min_relative_x: {type: "int", init: "relative_x - 30"},
		carousel_size: "int <- size(display) and sort(display, a.x > b.x)[0].x - 60",
		
		previous_centered_value: {type: "string", init: "''"},
		center_at: "def(decimal percent) -> commands [
			set(relative_x, min_relative_x-percent*carousel_size), 
			set(clip_area, [-relative_x+img_w/2-disp_w/2,-200,disp_w,400]) where disp_w = 300, //setting this disables mouse events
			
			if(current_centered_value != previous_centered_value, [
				on_change(current_centered_value),
				set(previous_centered_value, current_centered_value),
			]) where current_centered_value = sort(display, abs(a.x - focus_point) < abs(b.x - focus_point))[0].object
				where focus_point = lib.math.interpolate(sort(display, a.x < b.x)[0].x, percent, sort(display, a.x > b.x)[0].x) //find the min, max, and then where we are between those two
		]",
		nearest: "widget <- widgets[0]",
		
		scrollbar_well_play: 83, //Well size, from center, is -83 to 83.
		scrollbar_slider_size: 25,
		scrollbar_play: "int <- scrollbar_well_play - scrollbar_slider_size", //px of play around midpoint. Comes from 83-25, where 83 is half the background well width and 25 is half the slider width
		child_defaults: "map <- { 
			relative_x: relative_x, 
			relative_y: relative_y+50,
			parent: parent, 
			pane: me,
			use_absolute_screen_coordinates: use_absolute_screen_coordinates,
		}",
		background: {type: "obj widget_carousel.background", dynamic_initialization: true}, //Won't work as an init expression in a property.
		slider:     {type: "obj widget_carousel.slider",     dynamic_initialization: true},
	},
	
	on_create: "[
		add_object(_background),
		set(background, _background),
		
		add_object(_slider),
		set(slider, _slider),
		
		set_widgets(display),
		
		if(display, on_change(display[0].object)),
		
		fire_event('done_create'), //set the slider position
	] where _background = object('widget_carousel.background', 0,0,1, child_defaults),
		_slider = object('widget_carousel.slider', 0,0,1, child_defaults+{relative_x:-scrollbar_play})",
		
	on_done_create: "set(slider.pos, 0)", //set the slider position to the middle (scrollbar_play is far right, -scrollbar_play is far left)
		
	on_being_removed: "[remove_object(background), remove_object(slider)]",
	
	animation: {
		id: "normal",
		image: "effects/particles.png",
		x:86, y:73, w:28, h:28,
	},
	
	object_type: [{
		id: "background",
		zorder: '@include data/zorder.cfg:ovelaid_gui_dialog_gui_element_underlay',
		
		properties: {
			pane: {type: "obj widget_carousel"},
		},
		
		on_mouse_down: "switch(true, //We don't have anything that'll fire continually when the mouse button is held, or I'd use that.
			click_target >  pane.scrollbar_well_play, add(pane.slider.pos,  20),
			click_target < -pane.scrollbar_well_play, add(pane.slider.pos, -20)
		) where click_target = -(level.camera_position[0]+me.midpoint_x-arg.mouse_x)",
		
		animation: {
			id: "normal",
			image: 'gui/pause-menu/scrollbar-bits.png',
			x:0, y:0, w:100, h:11,
		}
	},{
		id: "slider",
		zorder: '@include data/zorder.cfg:ovelaid_gui_dialog_gui_element',
		
		properties: {
			pane: {type: "obj widget_carousel"},
			mouse_drag_offset_x: {type: "int|null", default: null},
			pos: {
				type: "int",
				get: "relative_x",
				set: "[
					set(relative_x, new_pos),
					if(pane.display, pane.center_at(new_pos/1.0/pane.scrollbar_play/2 + 0.5)),
				] where new_pos = lib.math.constrain(-pane.scrollbar_play, value, pane.scrollbar_play)",
			init: 0,
			},
		},
		
		//on_create: "[set(clip_area, [parent.offset[0],parent.offset[1],50,50]),]",
		
		on_mouse_down: "[
			set(mouse_drag_offset_x, relative_x-arg.mouse_x),
			animation('active'),
		]",
		"on_mouse_move*": "if(mouse_drag_offset_x != null,
			set(pos, mouse_drag_offset_x+arg.mouse_x)
		)",
		"on_mouse_up*": "[
			set(mouse_drag_offset_x, null),
			animation('normal'),
		]",
		
		animation: [{
			id: "normal",
			image: 'gui/pause-menu/scrollbar-bits.png',
			x:0, y:16, w:25, h:11,
		},{
			id: "active",
			image: 'gui/pause-menu/scrollbar-bits.png',
			x:0, y:32, w:25, h:11,
		}],
	}],
}