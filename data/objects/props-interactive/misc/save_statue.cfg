{
id: "save_statue",
dies_on_inactive: false,
zorder: "@include data/zorder.cfg:exterior_decor",
editor_info: {
	category: "props",
},

properties: {
	activate:  "commands :: [
					set(_last_triggered,cycle),
				    visually_activate,
				    save_game(),
				    checkpoint_game(),
					title(~The game has been saved.~),
					set(_player_has_left_bounds, false),
					map(filter(level.chars, value is obj save_statue and value != me), value.deactivate)
				]",
	visually_activate: "[
					set(particle_systems['fire_bits'].spawn_rate, 750),
					sound('SaveFrog.ogg'),
				]",
				
	deactivate: "commands :: [
					set(particle_systems['fire_bits'].spawn_rate, 0),
				]",

	is_player_within_bounds:  "bool :: (level.player.mid_x > _x_bound and level.player.mid_x <_x2_bound and level.player.mid_y > _y_bound and level.player.mid_y < _y2_bound and level.player.hitpoints > 0)",
	has_not_triggered_recently: "bool :: (cycle - _last_triggered > 100)",

	player_is_near_statue: "def(obj save_statue the_statue, int dist) -> bool lib.math.length(level.player,the_statue) < dist", //somewhat non-obvious; we use the rectangular area (assumed to be really close and tight, and to cover e.g. vertical passageways completely) to handle triggering the save.  However, to handle "making it possible to re-trigger this save point", we use a much wider, much more greedy circular radius.  Essentially all this is for is to prevent spamming the "game has been saved" message over and over if the player stands/walks near a save point.
#-------------------------- vars --------------------------#
	_x_bound: { type: "int", editor_info: { type: "x", value: "mid_x-50" } },
	_x2_bound: { type: "int", editor_info: { type: "x", value: "mid_x+50" } },
	_y_bound: { type: "int", editor_info: { type: "y", value: "mid_y-200" } },
	_y2_bound: { type: "int", editor_info: { type: "y", value: "mid_y+100" } },

	_last_triggered: { type: "int", default: -400, persistent: false },
	_player_has_left_bounds: { type: "bool", default: false, persistent: false },  //be false so when we respawn, we don't immediately save.
},

//when the player spawns, find the nearest save statue, then visually activate it.  If it's nearby, we can assume we respawned from it after loading-from-a-save or dying
on_load: "if(nearest_save_statue != null, if(player_is_near_statue(nearest_save_statue, 100), nearest_save_statue.visually_activate))
			where nearest_save_statue = head( sort( filter(level.chars, value is obj save_statue),
														lib.math.length(a,level.player) < lib.math.length(b,level.player)) )",

on_create: "[add_particles('fire_bits')]",
on_process: "[
				if(is_player_within_bounds and has_not_triggered_recently and _player_has_left_bounds, activate),
				if( (not player_is_near_statue(me,200)) and (not is_player_within_bounds) and (not _player_has_left_bounds), set(_player_has_left_bounds, true))
			]",

animation: [
	{
		"@base": true,
		image: "props/save_statue.png",
		pad: 3,
		palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
	},
	{
		id: "normal",
		rect: [1,1,30,30],
		frames: 1,
		duration: -1,
	},
],


particle_system: {
	id: "fire_bits",
	type: "simple",
	spawn_rate: 0,
	time_to_live: 32,
	min_x: 14,
	max_x: 18,
	min_y: 2,
	max_y: 4,
	velocity_y: -1300,
	velocity_x: -100,
	velocity_x_random: 200,
	velocity_y_random: 600,
	accel_y: -2,
	animation: {
		id: "sparkle",
		image: "props/save_statue.png",
		rect: [33,1,46,14],
		frames: 8,
		frames_per_row: 4,
		duration: 4,
		pad: 3,
		palettes: "@include data/palettes.cfg:seaside_palettes + forest_palettes + cave_palettes",
	},
},
}