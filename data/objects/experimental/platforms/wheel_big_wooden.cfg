{
	id: "wheel_big_wooden",
	zorder: -5,
	editor_info: {
		category: "platforms",
	},

	properties: {
#-------------------------- managed objects --------------------------#
		left_rope: { type: "obj wheel_big_wooden.vertical_rope", init: "object('wheel_big_wooden.vertical_rope', x+10, mid_y, facing)" },
		right_rope: { type: "obj wheel_big_wooden.vertical_rope", init: "object('wheel_big_wooden.vertical_rope', x+img_w-10, mid_y, facing)" },
		_ropes: "[obj wheel_big_wooden.vertical_rope] :: [left_rope, right_rope]",
		_platforms: { type: "[obj wheel_big_wooden.rope_platform]", default: [] },
		_other_wheel: { type: "obj wheel_big_wooden.wheel_big_wooden_back", init: "object('wheel_big_wooden.wheel_big_wooden_back', mid_x, mid_y, facing)" },

#-------------------------- const settings --------------------------#
		_platform_x_distance: "72",
		_platform_y_adjustment: "30",
		_platform_speed: "2",
		_cycle_period: "decimal :: 360 + (abs(mid_y - _other_wheel_position)*2)/_platform_speed",
		_rope_length: "decimal :: abs(mid_y - _other_wheel_position)",
		_activation_area: "[x - 30,  min(mid_y, _other_wheel_position) - img_w,  img_w + 60,  abs(mid_y - _other_wheel_position) + img_h*2 ]",

#-------------------------- editor settings --------------------------#
		_platform_count: { type:"int", editor_info: { type: "int", value: "4" }, default: 4 },
		_other_wheel_position: { type:"int", editor_info: { type: "y", value: "mid_y" }, init: "mid_y" },

	},
	
	on_process: "[
		set(rotate, rotate + 1),
		
		// We set the positions of all our platforms in here. Icky math ahead!
		// Historical Note: This code was written before we added 'sin' and 'cos' to our repertoire of functions. It is probable that this could be refactored down to about 5 simple lines of code.
		map(_platforms, 'platform',

			if(cycle_pos > 180 and cycle_pos < 180 + context._rope_length/_platform_speed, [
				// if the platform is going vertically up the left side
				set(platform.mid_x, context.mid_x - _platform_x_distance),
				set(platform.mid_y, _platform_y_adjustment + context.mid_y - (cycle_pos - 180)*_platform_speed)
			],[
				if(cycle_pos > 360 + context._rope_length/_platform_speed, [
					// if the platform is going vertically down the right side
					set(platform.mid_x, context.mid_x + _platform_x_distance),
					set(platform.mid_y, _platform_y_adjustment + context._other_wheel_position + (cycle_pos - (360 + context._rope_length/_platform_speed))*_platform_speed)
				],[
					// if the platform is curving around the platform. This is basically
					// a circle once you subtract the time spent on the edges.
					set(platform.mid_x, context.mid_x + (wave((if(cycle_pos <= 180, cycle_pos, cycle_pos - context._rope_length/_platform_speed)*1000)/360 + 250)*_platform_x_distance)/1000),
					set(platform.mid_y, _platform_y_adjustment + context.mid_y + (wave((if(cycle_pos <= 180, cycle_pos, cycle_pos - context._rope_length/_platform_speed)*1000)/360)*_platform_x_distance)/1000 - if(cycle_pos > 180, context._rope_length, 0)),
				])
			])
				
			// a variable representing where this platform is in its repeating cycle
			where cycle_pos = (cycle + (index*context._cycle_period)/size(_platforms)) % context._cycle_period
		),
	]",
	
	on_start_level: "[
		set(activation_area, _activation_area),
		
		[set(_other_wheel.mid_y, _other_wheel_position), add_object(_other_wheel)],
		map(_ropes, [set(value.y,  min(mid_y, _other_wheel_position)), add_object(value)] ),
		map([0] * _platform_count, spawn('wheel_big_wooden.rope_platform', x, y, facing, [add(_platforms, [child])])),
	]",
	
	on_draw: "map(_ropes, 'rope', rope.set_pos_len(rotate * if(index, -1, 1), _rope_length))",

	animation: {
		image: "props/wooden-wheel.png",
		id: "normal",
		x: 104,
		y: 4,
		w: 80,
		h: 80,
	},


	object_type: [
	{
		id: "rope_platform",
		platform_area: [0,26,37,27],
		
		properties: {
			material_sound: "'wood'",
		},
		
		animation: {
			no_remove_alpha_borders: true,
			id: "normal",
			image: "props/rope-platform.png",
			rect: [0,0,63,63],
			frames: 1,
			duration: 1000,
		},
	},

	{
		id: "vertical_rope",
		zsub_order: 5,
		no_compile_image: "props/rope-vertical.png", // We don't want to compile this image since we rely on it tiling.
		
		properties: {
			set_pos_len: "def(decimal pos, decimal len) -> commands [
				set(_length, len), 
				set(_start_position, pos%5), 
				fire_event(me, 'calculate_segments'),
			]",
			move_pos: "def(decimal amount) -> commands [
				set(_start_position, (_start_position+amount)%5), 
				fire_event(me, 'calculate_segments'),
			]",
			set_y: "def(decimal new_y) -> commands 
				if(new_y != y, set(me.y, y + diff))
				where diff = new_y - y",

			_length: { type:"decimal",  default: 150 },
			_start_position: { type:"decimal",  default: 0 },
		},
		
		on_spawned: "fire_event('calculate_segments')",
		
		on_calculate_segments: "set(draw_area, [0, _start_position, 4, _length/2])",

		animation: {
			image: "props/rope-vertical.png",
			id: "normal",
			x: 0,
			w: 4,
			y: 0,
			h: 4,
		},
	},

	{
		id: "wheel_big_wooden_back",
		zsub_order: 10,
		
		on_process: "set(rotate, rotate + 1)",
		
		animation: {
			image: "props/wooden-wheel.png",
			id: "normal",
			x: 5,
			y: 4,
			w: 80,
			h: 80,
		},
	}

	],
}